component ModuleType1
    % ModuleType1:2
    % Module Block
    %    Model resolution: Lumped
    %    Number of parallel assemblies: 11
    %    Number of cells per parallel assembly: 3
    %
    %    MATLAB version: 9.14
    %    Simscape Battery version: 1.0
    %    Simscape code generated on: 11-Jul-2022 11:46:41

    parameters
        SOC_vec = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        T_vec = {[278, 293, 313],'K'}; % Vector of temperatures, T
        V0_mat = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, V0(SOC,T)
        V_range = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_mat = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance, R0(SOC,T)
        AH = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_option = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        thermal_mass = {100,'J/K'}; % Thermal mass
        CoolantThermalPathResistance = {1.2,'K/W'}; % Cell level coolant thermal path resistance
    end

    parameters(ExternalAccess=none)
        P = 3; % Batteries in Parallel
        S = 11; % Batteries in Series
        CellCount = P*S; % Number of cells in battery
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
        ClntH = foundation.thermal.thermal; % CH
    end

    variables
        iCellModel = {0,'A'}; % Cell model current (positive in)
        vCellModel = {0,'V'}; % Cell model terminal voltage
        socCellModel = {value={1,'1'},priority=priority.high}; % Cell model state of charge
        numCyclesCellModel = {value={0,'1'},priority=priority.high}; % Cell model discharge cycles
        temperatureCellModel = {value={298.15,'K'},priority=priority.high}; % Cell model temperature
        vParallelAssembly = {value={repmat(0,11,1),'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={repmat(1,11,1),'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(iCellModel) == 1);
        assert(length(vCellModel) == 1);
        assert(length(socCellModel) == 1);
        assert(length(numCyclesCellModel) == 1);
        assert(length(temperatureCellModel) == 1);
        assert(length(vParallelAssembly) == S);
        assert(length(socParallelAssembly) == S);
        vParallelAssembly(1) == Module1.v/S;
        socParallelAssembly(1) == Module1.stateOfCharge;
        Module1.i == iCellModel;
        Module1.v == vCellModel;
        Module1.stateOfCharge == socCellModel;
        Module1.num_cycles == numCyclesCellModel;
        Module1.cell_temperature == temperatureCellModel;
    end

    components(ExternalAccess=observe)
        Module1 = batteryecm.table_battery(SOC_vec = SOC_vec,T_vec = T_vec,V0_mat = V0_mat*S,V_range = V_range*S,...
            R0_mat = R0_mat*S/P,AH = AH*P,extrapolation_option = extrapolation_option,...
            thermal_mass = thermal_mass*S*P,...
            T_dependence = simscape.enum.tablebattery.temperature_dependence.yes,...
            thermal_port = simscape.enum.thermaleffects.model,prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
            prm_age_capacity = simscape.enum.tablebattery.prm_age.disabled,...
            prm_age_resistance = simscape.enum.tablebattery.prm_age.disabled,...
            prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,...
            prm_dyn = simscape.enum.tablebattery.prm_dyn.off,...
            prm_dir = simscape.enum.tablebattery.prm_dir.noCurrentDirectionality,...
            prm_fade = simscape.enum.tablebattery.prm_fade.disabled,prm_leak = simscape.enum.tablebattery.prm_leak.disabled,...
            i.priority = priority.none,v.priority = priority.none,...
            stateOfCharge.priority = priority.none,num_cycles.priority = priority.none,...
            cell_temperature.priority = priority.none);
        CoolantResistance = foundation.thermal.elements.resistance(resistance = CoolantThermalPathResistance/(S*P));
    end

    connections
        connect(p,Module1.p);
        connect(n,Module1.n);
        connect(Module1.H,CoolantResistance.A);
        connect(CoolantResistance.B,ClntH);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vec,T_vec,V0_mat,V_range,R0_mat,AH,extrapolation_option),...
            UIGroup("Thermal",thermal_mass,CoolantThermalPathResistance)];
        Icon = 'module.svg';
    end

    for CellIdx = 2:S
        equations
            vParallelAssembly(1) == vParallelAssembly(CellIdx);
            socParallelAssembly(1) == socParallelAssembly(CellIdx);
        end
    end
end